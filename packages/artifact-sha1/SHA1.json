{
  "contractName": "SHA1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        }
      ],
      "name": "Debug",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"Debug\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/sbacha/github/solsha1/contracts/SHA1.sol\":\"SHA1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/sbacha/github/solsha1/contracts/SHA1.sol\":{\"keccak256\":\"0xf400ebc75f77539e256b05773b840a1908b7c79ac39863ea8e80a3408c90a30a\",\"urls\":[\"bzz-raw://7b2ff0c33b4215ce9eb2343ae83b8ed15a2d8b76c0d91c864ed691b15ad5a4b9\",\"dweb:/ipfs/Qme6LYwQDT1zcKzNjaFZssUKrhMNZoT1qPn4sw5ZckGp7c\"]}},\"version\":1}",
  "bytecode": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820421cabf4f8c972cf0a5d54e551c4e94af7e2c3b7e909f99308bce89b5adaf75d64736f6c63430005100032",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820421cabf4f8c972cf0a5d54e551c4e94af7e2c3b7e909f99308bce89b5adaf75d64736f6c63430005100032",
  "sourceMap": "26:5711:1:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",
  "deployedSourceMap": "26:5711:1:-;;;;;;;;",
  "source": "pragma solidity >0.4.18;\n\nlibrary SHA1 {\n    event Debug(bytes32 x);\n\n    function sha1(bytes memory data) internal pure returns(bytes20 ret) {\n        assembly {\n            // Get a safe scratch location\n            let scratch := mload(0x40)\n\n            // Get the data length, and point data at the first byte\n            let len := mload(data)\n            data := add(data, 32)\n\n            // Find the length after padding\n            let totallen := add(and(add(len, 1), 0xFFFFFFFFFFFFFFC0), 64)\n            switch lt(sub(totallen, len), 9)\n            case 1 { totallen := add(totallen, 64) }\n\n            let h := 0x6745230100EFCDAB890098BADCFE001032547600C3D2E1F0\n\n            function readword(ptr, off, count) -> result {\n                result := 0\n                if lt(off, count) {\n                    result := mload(add(ptr, off))\n                    count := sub(count, off)\n                    if lt(count, 32) {\n                        let mask := not(sub(exp(256, sub(32, count)), 1))\n                        result := and(result, mask)\n                    }\n                }\n            }\n\n            for { let i := 0 } lt(i, totallen) { i := add(i, 64) } {\n                mstore(scratch, readword(data, i, len))\n                mstore(add(scratch, 32), readword(data, add(i, 32), len))\n\n                // If we loaded the last byte, store the terminator byte\n                switch lt(sub(len, i), 64)\n                case 1 { mstore8(add(scratch, sub(len, i)), 0x80) }\n\n                // If this is the last block, store the length\n                switch eq(i, sub(totallen, 64))\n                case 1 { mstore(add(scratch, 32), or(mload(add(scratch, 32)), mul(len, 8))) }\n\n                // Expand the 16 32-bit words into 80\n                for { let j := 64 } lt(j, 128) { j := add(j, 12) } {\n                    let temp := xor(xor(mload(add(scratch, sub(j, 12))), mload(add(scratch, sub(j, 32)))), xor(mload(add(scratch, sub(j, 56))), mload(add(scratch, sub(j, 64)))))\n                    temp := or(and(mul(temp, 2), 0xFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFE), and(div(temp, 0x80000000), 0x0000000100000001000000010000000100000001000000010000000100000001))\n                    mstore(add(scratch, j), temp)\n                }\n                for { let j := 128 } lt(j, 320) { j := add(j, 24) } {\n                    let temp := xor(xor(mload(add(scratch, sub(j, 24))), mload(add(scratch, sub(j, 64)))), xor(mload(add(scratch, sub(j, 112))), mload(add(scratch, sub(j, 128)))))\n                    temp := or(and(mul(temp, 4), 0xFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC), and(div(temp, 0x40000000), 0x0000000300000003000000030000000300000003000000030000000300000003))\n                    mstore(add(scratch, j), temp)\n                }\n\n                let x := h\n                let f := 0\n                let k := 0\n                for { let j := 0 } lt(j, 80) { j := add(j, 1) } {\n                    switch div(j, 20)\n                    case 0 {\n                        // f = d xor (b and (c xor d))\n                        f := xor(div(x, 0x100000000000000000000), div(x, 0x10000000000))\n                        f := and(div(x, 0x1000000000000000000000000000000), f)\n                        f := xor(div(x, 0x10000000000), f)\n                        k := 0x5A827999\n                    }\n                    case 1{\n                        // f = b xor c xor d\n                        f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                        f := xor(div(x, 0x10000000000), f)\n                        k := 0x6ED9EBA1\n                    }\n                    case 2 {\n                        // f = (b and c) or (d and (b or c))\n                        f := or(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                        f := and(div(x, 0x10000000000), f)\n                        f := or(and(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000)), f)\n                        k := 0x8F1BBCDC\n                    }\n                    case 3 {\n                        // f = b xor c xor d\n                        f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                        f := xor(div(x, 0x10000000000), f)\n                        k := 0xCA62C1D6\n                    }\n                    // temp = (a leftrotate 5) + f + e + k + w[i]\n                    let temp := and(div(x, 0x80000000000000000000000000000000000000000000000), 0x1F)\n                    temp := or(and(div(x, 0x800000000000000000000000000000000000000), 0xFFFFFFE0), temp)\n                    temp := add(f, temp)\n                    temp := add(and(x, 0xFFFFFFFF), temp)\n                    temp := add(k, temp)\n                    temp := add(div(mload(add(scratch, mul(j, 4))), 0x100000000000000000000000000000000000000000000000000000000), temp)\n                    x := or(div(x, 0x10000000000), mul(temp, 0x10000000000000000000000000000000000000000))\n                    x := or(and(x, 0xFFFFFFFF00FFFFFFFF000000000000FFFFFFFF00FFFFFFFF), mul(or(and(div(x, 0x4000000000000), 0xC0000000), and(div(x, 0x400000000000000000000), 0x3FFFFFFF)), 0x100000000000000000000))\n                }\n\n                h := and(add(h, x), 0xFFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF)\n            }\n            ret := mul(or(or(or(or(and(div(h, 0x100000000), 0xFFFFFFFF00000000000000000000000000000000), and(div(h, 0x1000000), 0xFFFFFFFF000000000000000000000000)), and(div(h, 0x10000), 0xFFFFFFFF0000000000000000)), and(div(h, 0x100), 0xFFFFFFFF00000000)), and(h, 0xFFFFFFFF)), 0x1000000000000000000000000)\n        }\n    }\n}\n",
  "sourcePath": "/Users/sbacha/github/solsha1/contracts/SHA1.sol",
  "ast": {
    "absolutePath": "/Users/sbacha/github/solsha1/contracts/SHA1.sol",
    "exportedSymbols": {
      "SHA1": [
        72
      ]
    },
    "id": 73,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 58,
        "literals": [
          "solidity",
          ">",
          "0.4",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 72,
        "linearizedBaseContracts": [
          72
        ],
        "name": "SHA1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 62,
            "name": "Debug",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "indexed": false,
                  "name": "x",
                  "nodeType": "VariableDeclaration",
                  "scope": 62,
                  "src": "57:9:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 59,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "57:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "56:11:1"
            },
            "src": "45:23:1"
          },
          {
            "body": {
              "id": 70,
              "nodeType": "Block",
              "src": "142:5593:1",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "344:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "362:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "374:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1225:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1290:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "ret": {
                        "declaration": 67,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5424:3:1",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 69,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let scratch := mload(0x40)\n    let len := mload(data)\n    data := add(data, 32)\n    let totallen := add(and(add(len, 1), 0xFFFFFFFFFFFFFFC0), 64)\n    switch lt(sub(totallen, len), 9)\n    case 1 { totallen := add(totallen, 64) }\n    let h := 0x6745230100EFCDAB890098BADCFE001032547600C3D2E1F0\n    function readword(ptr, off, count) -> result\n    {\n        result := 0\n        if lt(off, count)\n        {\n            result := mload(add(ptr, off))\n            count := sub(count, off)\n            if lt(count, 32)\n            {\n                let mask := not(sub(exp(256, sub(32, count)), 1))\n                result := and(result, mask)\n            }\n        }\n    }\n    for { let i := 0 } lt(i, totallen) { i := add(i, 64) }\n    {\n        mstore(scratch, readword(data, i, len))\n        mstore(add(scratch, 32), readword(data, add(i, 32), len))\n        switch lt(sub(len, i), 64)\n        case 1 {\n            mstore8(add(scratch, sub(len, i)), 0x80)\n        }\n        switch eq(i, sub(totallen, 64))\n        case 1 {\n            mstore(add(scratch, 32), or(mload(add(scratch, 32)), mul(len, 8)))\n        }\n        for { let j := 64 } lt(j, 128) { j := add(j, 12) }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 12))), mload(add(scratch, sub(j, 32)))), xor(mload(add(scratch, sub(j, 56))), mload(add(scratch, sub(j, 64)))))\n            temp := or(and(mul(temp, 2), 0xFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFE), and(div(temp, 0x80000000), 0x0000000100000001000000010000000100000001000000010000000100000001))\n            mstore(add(scratch, j), temp)\n        }\n        for { let j := 128 } lt(j, 320) { j := add(j, 24) }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 24))), mload(add(scratch, sub(j, 64)))), xor(mload(add(scratch, sub(j, 112))), mload(add(scratch, sub(j, 128)))))\n            temp := or(and(mul(temp, 4), 0xFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC), and(div(temp, 0x40000000), 0x0000000300000003000000030000000300000003000000030000000300000003))\n            mstore(add(scratch, j), temp)\n        }\n        let x := h\n        let f := 0\n        let k := 0\n        for { let j := 0 } lt(j, 80) { j := add(j, 1) }\n        {\n            switch div(j, 20)\n            case 0 {\n                f := xor(div(x, 0x100000000000000000000), div(x, 0x10000000000))\n                f := and(div(x, 0x1000000000000000000000000000000), f)\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x5A827999\n            }\n            case 1 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x6ED9EBA1\n            }\n            case 2 {\n                f := or(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := and(div(x, 0x10000000000), f)\n                f := or(and(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000)), f)\n                k := 0x8F1BBCDC\n            }\n            case 3 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0xCA62C1D6\n            }\n            let temp := and(div(x, 0x80000000000000000000000000000000000000000000000), 0x1F)\n            temp := or(and(div(x, 0x800000000000000000000000000000000000000), 0xFFFFFFE0), temp)\n            temp := add(f, temp)\n            temp := add(and(x, 0xFFFFFFFF), temp)\n            temp := add(k, temp)\n            temp := add(div(mload(add(scratch, mul(j, 4))), 0x100000000000000000000000000000000000000000000000000000000), temp)\n            x := or(div(x, 0x10000000000), mul(temp, 0x10000000000000000000000000000000000000000))\n            x := or(and(x, 0xFFFFFFFF00FFFFFFFF000000000000FFFFFFFF00FFFFFFFF), mul(or(and(div(x, 0x4000000000000), 0xC0000000), and(div(x, 0x400000000000000000000), 0x3FFFFFFF)), 0x100000000000000000000))\n        }\n        h := and(add(h, x), 0xFFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF)\n    }\n    ret := mul(or(or(or(or(and(div(h, 0x100000000), 0xFFFFFFFF00000000000000000000000000000000), and(div(h, 0x1000000), 0xFFFFFFFF000000000000000000000000)), and(div(h, 0x10000), 0xFFFFFFFF0000000000000000)), and(div(h, 0x100), 0xFFFFFFFF00000000)), and(h, 0xFFFFFFFF)), 0x1000000000000000000000000)\n}",
                  "src": "152:5577:1"
                }
              ]
            },
            "documentation": null,
            "id": 71,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sha1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 65,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 64,
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 71,
                  "src": "88:17:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 63,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "88:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "87:19:1"
            },
            "returnParameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "ret",
                  "nodeType": "VariableDeclaration",
                  "scope": 71,
                  "src": "129:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes20",
                    "typeString": "bytes20"
                  },
                  "typeName": {
                    "id": 66,
                    "name": "bytes20",
                    "nodeType": "ElementaryTypeName",
                    "src": "129:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes20",
                      "typeString": "bytes20"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "128:13:1"
            },
            "scope": 72,
            "src": "74:5661:1",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 73,
        "src": "26:5711:1"
      }
    ],
    "src": "0:5738:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/sbacha/github/solsha1/contracts/SHA1.sol",
    "exportedSymbols": {
      "SHA1": [
        72
      ]
    },
    "id": 73,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 58,
        "literals": [
          "solidity",
          ">",
          "0.4",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 72,
        "linearizedBaseContracts": [
          72
        ],
        "name": "SHA1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 62,
            "name": "Debug",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "indexed": false,
                  "name": "x",
                  "nodeType": "VariableDeclaration",
                  "scope": 62,
                  "src": "57:9:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 59,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "57:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "56:11:1"
            },
            "src": "45:23:1"
          },
          {
            "body": {
              "id": 70,
              "nodeType": "Block",
              "src": "142:5593:1",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "344:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "362:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "374:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1225:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 64,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1290:4:1",
                        "valueSize": 1
                      }
                    },
                    {
                      "ret": {
                        "declaration": 67,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5424:3:1",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 69,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let scratch := mload(0x40)\n    let len := mload(data)\n    data := add(data, 32)\n    let totallen := add(and(add(len, 1), 0xFFFFFFFFFFFFFFC0), 64)\n    switch lt(sub(totallen, len), 9)\n    case 1 { totallen := add(totallen, 64) }\n    let h := 0x6745230100EFCDAB890098BADCFE001032547600C3D2E1F0\n    function readword(ptr, off, count) -> result\n    {\n        result := 0\n        if lt(off, count)\n        {\n            result := mload(add(ptr, off))\n            count := sub(count, off)\n            if lt(count, 32)\n            {\n                let mask := not(sub(exp(256, sub(32, count)), 1))\n                result := and(result, mask)\n            }\n        }\n    }\n    for { let i := 0 } lt(i, totallen) { i := add(i, 64) }\n    {\n        mstore(scratch, readword(data, i, len))\n        mstore(add(scratch, 32), readword(data, add(i, 32), len))\n        switch lt(sub(len, i), 64)\n        case 1 {\n            mstore8(add(scratch, sub(len, i)), 0x80)\n        }\n        switch eq(i, sub(totallen, 64))\n        case 1 {\n            mstore(add(scratch, 32), or(mload(add(scratch, 32)), mul(len, 8)))\n        }\n        for { let j := 64 } lt(j, 128) { j := add(j, 12) }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 12))), mload(add(scratch, sub(j, 32)))), xor(mload(add(scratch, sub(j, 56))), mload(add(scratch, sub(j, 64)))))\n            temp := or(and(mul(temp, 2), 0xFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFE), and(div(temp, 0x80000000), 0x0000000100000001000000010000000100000001000000010000000100000001))\n            mstore(add(scratch, j), temp)\n        }\n        for { let j := 128 } lt(j, 320) { j := add(j, 24) }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 24))), mload(add(scratch, sub(j, 64)))), xor(mload(add(scratch, sub(j, 112))), mload(add(scratch, sub(j, 128)))))\n            temp := or(and(mul(temp, 4), 0xFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC), and(div(temp, 0x40000000), 0x0000000300000003000000030000000300000003000000030000000300000003))\n            mstore(add(scratch, j), temp)\n        }\n        let x := h\n        let f := 0\n        let k := 0\n        for { let j := 0 } lt(j, 80) { j := add(j, 1) }\n        {\n            switch div(j, 20)\n            case 0 {\n                f := xor(div(x, 0x100000000000000000000), div(x, 0x10000000000))\n                f := and(div(x, 0x1000000000000000000000000000000), f)\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x5A827999\n            }\n            case 1 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x6ED9EBA1\n            }\n            case 2 {\n                f := or(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := and(div(x, 0x10000000000), f)\n                f := or(and(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000)), f)\n                k := 0x8F1BBCDC\n            }\n            case 3 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0xCA62C1D6\n            }\n            let temp := and(div(x, 0x80000000000000000000000000000000000000000000000), 0x1F)\n            temp := or(and(div(x, 0x800000000000000000000000000000000000000), 0xFFFFFFE0), temp)\n            temp := add(f, temp)\n            temp := add(and(x, 0xFFFFFFFF), temp)\n            temp := add(k, temp)\n            temp := add(div(mload(add(scratch, mul(j, 4))), 0x100000000000000000000000000000000000000000000000000000000), temp)\n            x := or(div(x, 0x10000000000), mul(temp, 0x10000000000000000000000000000000000000000))\n            x := or(and(x, 0xFFFFFFFF00FFFFFFFF000000000000FFFFFFFF00FFFFFFFF), mul(or(and(div(x, 0x4000000000000), 0xC0000000), and(div(x, 0x400000000000000000000), 0x3FFFFFFF)), 0x100000000000000000000))\n        }\n        h := and(add(h, x), 0xFFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF)\n    }\n    ret := mul(or(or(or(or(and(div(h, 0x100000000), 0xFFFFFFFF00000000000000000000000000000000), and(div(h, 0x1000000), 0xFFFFFFFF000000000000000000000000)), and(div(h, 0x10000), 0xFFFFFFFF0000000000000000)), and(div(h, 0x100), 0xFFFFFFFF00000000)), and(h, 0xFFFFFFFF)), 0x1000000000000000000000000)\n}",
                  "src": "152:5577:1"
                }
              ]
            },
            "documentation": null,
            "id": 71,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sha1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 65,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 64,
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 71,
                  "src": "88:17:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 63,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "88:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "87:19:1"
            },
            "returnParameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 67,
                  "name": "ret",
                  "nodeType": "VariableDeclaration",
                  "scope": 71,
                  "src": "129:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes20",
                    "typeString": "bytes20"
                  },
                  "typeName": {
                    "id": 66,
                    "name": "bytes20",
                    "nodeType": "ElementaryTypeName",
                    "src": "129:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes20",
                      "typeString": "bytes20"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "128:13:1"
            },
            "scope": 72,
            "src": "74:5661:1",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 73,
        "src": "26:5711:1"
      }
    ],
    "src": "0:5738:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.2",
  "updatedAt": "2020-08-04T12:00:23.017Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}